extends Node

signal building_action_completed(location: String, action_index: int)

var items_db
var current_building_menu = null

func _ready():
	items_db = get_node("/root/ItemsDB")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–¥–∞–Ω–∏–∏
func handle_building_action(location: String, action_index: int, player_data: Dictionary, main_node: Node):
	print("üè¢ –î–µ–π—Å—Ç–≤–∏–µ –≤ " + location + ", –∏–Ω–¥–µ–∫—Å: " + str(action_index))
	
	match location:
		"–õ–ê–†–Å–ö":
			handle_kiosk_action(action_index, player_data, main_node)
		"–ì–ê–†–ê–ñ":
			handle_garage_action(action_index, player_data, main_node)
		"–†–´–ù–û–ö":
			handle_market_action(action_index, player_data, main_node)
		"–ü–û–†–¢":
			handle_port_action(action_index, player_data, main_node)
		"–û–ë–©–ï–ñ–ò–¢–ò–ï":
			handle_dorm_action(action_index, player_data, main_node)
		"–£–õ–ò–¶–ê":
			handle_street_action(action_index, player_data, main_node)
		"–í–û–ö–ó–ê–õ":
			handle_station_action(action_index, player_data, main_node)
	
	building_action_completed.emit(location, action_index)

# –õ–ê–†–Å–ö
func handle_kiosk_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ö—É–ø–∏—Ç—å –ø–∏–≤–æ (30—Ä)
			buy_item("–ü–∏–≤–æ", player_data, main_node)
		1: # –ö—É–ø–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—ã (15—Ä)
			buy_item("–°–∏–≥–∞—Ä–µ—Ç—ã", player_data, main_node)
		2: # –ö—É–ø–∏—Ç—å –∫–µ–ø–∫—É (50—Ä)
			buy_item("–ö–µ–ø–∫–∞", player_data, main_node)

# –ì–ê–†–ê–ñ
func handle_garage_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ö—É–ø–∏—Ç—å –±–∏—Ç—É (100—Ä)
			buy_item("–ë–∏—Ç–∞", player_data, main_node)
		1: # –ü–æ–º–æ—á—å –º–µ—Ö–∞–Ω–∏–∫—É
			if "–ü–∏–≤–æ" in player_data["inventory"]:
				player_data["inventory"].erase("–ü–∏–≤–æ")
				player_data["balance"] += 100
				player_data["reputation"] += 5
				main_node.show_message("–ü–æ–º–æ–≥–ª–∏ –º–µ—Ö–∞–Ω–∏–∫—É! +100 —Ä—É–±., +5 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
				main_node.update_ui()
				
				# –ü—Ä–æ–∫–∞—á–∫–∞ —Å–∏–ª—ã –∏ –≤–æ–∂–¥–µ–Ω–∏—è –∑–∞ —Ä–µ–º–æ–Ω—Ç
				var stats_system = get_node("/root/PlayerStats")
				if stats_system:
					stats_system.add_stat_xp("STR", 10)
					stats_system.add_stat_xp("DRV", 5)
			else:
				main_node.show_message("–ú–µ—Ö–∞–Ω–∏–∫: '–ü—Ä–∏–Ω–µ—Å–∏ –ø–∏–≤–∫–∞!'")
		2: # –í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
			player_data["inventory"].append("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
			main_node.show_message("–í–∑—è–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –≥–∞—Ä–∞–∂–∞")
			
			# –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –∑–∞–º–∫–∞ –Ω–∞ —è—â–∏–∫–µ
			var stats_system = get_node("/root/PlayerStats")
			if stats_system and "–û—Ç–º—ã—á–∫–∞" in player_data["inventory"]:
				var lockpick_chance = stats_system.calculate_lockpick_chance(0.2)
				if randf() < lockpick_chance:
					player_data["balance"] += 50
					stats_system.on_lockpick_attempt(true)
					main_node.show_message("üîì –í–∑–ª–æ–º–∞–ª–∏ —è—â–∏–∫! –ù–∞—à–ª–∏ 50 —Ä—É–±.")
				else:
					stats_system.on_lockpick_attempt(false)
					main_node.show_message("üîí –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑–ª–æ–º–∞—Ç—å –∑–∞–º–æ–∫")

# –†–´–ù–û–ö
func handle_market_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ö—É–ø–∏—Ç—å –∫–æ–∂–∞–Ω–∫—É (200—Ä)
			buy_item("–ö–æ–∂–∞–Ω–∫–∞", player_data, main_node)
		1: # –ü—Ä–æ–¥–∞—Ç—å –≤–µ—â—å
			if player_data["inventory"].size() > 0:
				show_sell_menu(player_data, main_node)
			else:
				main_node.show_message("–†—é–∫–∑–∞–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å")
		2: # –£–∑–Ω–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
			var news = [
				"–ì–æ–≤–æ—Ä—è—Ç, –Ω–∞ –ø–æ—Ä—Ç—É –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Å—Ç–≤–æ–ª...",
				"–°–ª—ã—à–∞–ª, –º–µ—Ö–∞–Ω–∏–∫—É –≤ –≥–∞—Ä–∞–∂–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
				"–ù–∞ –≤–æ–∫–∑–∞–ª–µ –∫—Ç–æ-—Ç–æ –∏—â–µ—Ç –∫—É—Ä—å–µ—Ä–∞",
				"–í –≥–æ—Ä–æ–¥–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ª—é–¥–∏"
			]
			main_node.show_message(news[randi() % news.size()])
			
			# –®–∞–Ω—Å —É–∫—Ä–∞—Å—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Ä—ã–Ω–∫–∞
			var player_stats = get_node("/root/PlayerStats")
			if player_stats and randf() < 0.3:  # 30% —à–∞–Ω—Å
				var stealth_check = randf()
				var detection_chance = 0.5 - player_stats.get_stat("STEALTH") * 0.05
				
				if stealth_check > detection_chance:
					var stolen_items = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–°–∏–≥–∞—Ä–µ—Ç—ã", "–ë—É–ª–∫–∞"]
					var stolen = stolen_items[randi() % stolen_items.size()]
					player_data["inventory"].append(stolen)
					player_stats.on_theft_attempt(false, 25)
					main_node.show_message("ü•∑ –ù–µ–∑–∞–º–µ—Ç–Ω–æ —É–∫—Ä–∞–ª–∏: " + stolen)
				else:
					player_stats.on_theft_attempt(true, 0)
					main_node.show_message("‚ö†Ô∏è –ß—É—Ç—å –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Ä–æ–≤—Å—Ç–≤–∞!")

# –ü–û–†–¢
func handle_port_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ö—É–ø–∏—Ç—å –ü–ú (500—Ä)
			buy_item("–ü–ú", player_data, main_node)
		1: # –ö—É–ø–∏—Ç—å –æ—Ç–º—ã—á–∫—É (100—Ä)
			buy_item("–û—Ç–º—ã—á–∫–∞", player_data, main_node)
		2: # –£–π—Ç–∏
			main_node.close_location_menu()
			
			# –®–∞–Ω—Å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–æ–≤ (–ø—Ä–æ–∫–∞—á–∫–∞ –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏—è)
			var stats_system = get_node("/root/PlayerStats")
			if stats_system and randf() < 0.2:  # 20% —à–∞–Ω—Å
				var cha = stats_system.get_stat("CHA")
				var persuasion_chance = 0.3 + cha * 0.05
				
				if randf() < persuasion_chance:
					player_data["balance"] += 50
					stats_system.on_persuasion_attempt(true)
					main_node.show_message("üí¨ –£–±–µ–¥–∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (+50 —Ä—É–±)")
				else:
					stats_system.on_persuasion_attempt(false)
					main_node.show_message("üí¨ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–∞–º–∏")

# –û–ë–©–ï–ñ–ò–¢–ò–ï
func handle_dorm_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –û—Ç–¥–æ—Ö–Ω—É—Ç—å
			var heal_amount = 30
			player_data["health"] = min(100, player_data["health"] + heal_amount)
			main_node.show_message("–•–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ (+30 HP)")
			main_node.update_ui()
		1: # –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¥—Ä—É–≥–æ–º
			var dialogues = [
				"–î—Ä—É–≥: '–ö–∞–∫ –¥–µ–ª–∞, –±—Ä–∞—Ç–∞–Ω?'",
				"–î—Ä—É–≥: '–°–ª—ã—à–∞–ª, –Ω–∞ —Ä—ã–Ω–∫–µ –≤—ã–≥–æ–¥–Ω–æ –ø—Ä–æ–¥–∞—é—Ç'",
				"–î—Ä—É–≥: '–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è –Ω–∞ —É–ª–∏—Ü–∞—Ö'",
				"–î—Ä—É–≥: '–ú–æ–∂–µ—Ç, –ø–∏–≤–∞ –ø—Ä–∏–Ω–µ—Å—ë—à—å?'"
			]
			main_node.show_message(dialogues[randi() % dialogues.size()])
		2: # –í–∑—è—Ç—å –≤–µ—â–∏
			player_data["inventory"].append("–ü—Ä–æ–¥—É–∫—Ç—ã")
			main_node.show_message("–í–∑—è–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ–±—â–∞–≥–∏")

# –£–õ–ò–¶–ê
func handle_street_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è
			var events = [
				"–ü—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –¢–≤–µ—Ä–∏",
				"–í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –±—Ä–æ–¥—è—á—É—é —Å–æ–±–∞–∫—É",
				"–ù–∞—à–ª–∏ 10 —Ä—É–±–ª–µ–π –Ω–∞ –∑–µ–º–ª–µ!",
				"–ü–æ–≥–æ–¥–∞ –æ—Ç–ª–∏—á–Ω–∞—è"
			]
			var event = randi() % events.size()
			if event == 2:
				player_data["balance"] += 10
				main_node.update_ui()
			main_node.show_message(events[event])
		1: # –í—Å—Ç—Ä–µ—Ç–∏—Ç—å –∑–Ω–∞–∫–æ–º–æ–≥–æ
			main_node.show_message("–ö–µ–Ω—Ç: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∂–∏–∑–Ω—å?'")
		2: # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∫—Ä—É–≥
			main_node.show_message("–í–æ–∫—Ä—É–≥ –º–Ω–æ–≥–æ –ª—é–¥–µ–π, —à—É–º–Ω—ã–π –≥–æ—Ä–æ–¥")

# –í–û–ö–ó–ê–õ
func handle_station_action(action_index: int, player_data: Dictionary, main_node: Node):
	match action_index:
		0: # –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç
			if player_data["balance"] >= 50:
				player_data["balance"] -= 50
				main_node.show_message("–ö—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –Ω–∞ –ø–æ–µ–∑–¥ (50 —Ä—É–±.)")
				main_node.update_ui()
			else:
				main_node.show_message("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ 50 —Ä—É–±.")
		1: # –í—Å—Ç—Ä–µ—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
			var contacts = [
				"–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è...",
				"–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü: '–ò—â–µ—à—å —Ä–∞–±–æ—Ç—É?'",
				"–ö–æ–Ω—Ç–∞–∫—Ç –ø–µ—Ä–µ–¥–∞–ª –∑–∞–ø–∏—Å–∫—É"
			]
			main_node.show_message(contacts[randi() % contacts.size()])
		2: # –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è
			main_node.show_message("–ú–Ω–æ–≥–æ –ª—é–¥–µ–π —Å–ø–µ—à–∞—Ç –Ω–∞ –ø–æ–µ–∑–¥–∞")

# –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
func buy_item(item_name: String, player_data: Dictionary, main_node: Node):
	var item_data = items_db.get_item(item_name)
	if not item_data:
		main_node.show_message("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	
	var price = item_data["price"]
	
	if player_data["balance"] >= price:
		player_data["balance"] -= price
		player_data["inventory"].append(item_name)
		main_node.show_message("‚úÖ –ö—É–ø–ª–µ–Ω–æ: " + item_name + " –∑–∞ " + str(price) + " —Ä—É–±.")
		main_node.update_ui()
	else:
		main_node.show_message("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ: " + str(price) + " —Ä—É–±.")

# –ú–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏
func show_sell_menu(player_data: Dictionary, main_node: Node):
	var sell_menu = CanvasLayer.new()
	sell_menu.name = "SellMenu"
	main_node.add_child(sell_menu)
	
	var bg = ColorRect.new()
	bg.size = Vector2(500, 700)
	bg.position = Vector2(110, 290)
	bg.color = Color(0.05, 0.05, 0.05, 0.95)
	sell_menu.add_child(bg)
	
	var title = Label.new()
	title.text = "–ß–¢–û –ü–†–û–î–ê–¢–¨?"
	title.position = Vector2(280, 310)
	title.add_theme_font_size_override("font_size", 26)
	title.add_theme_color_override("font_color", Color(1.0, 0.8, 0.2, 1.0))
	sell_menu.add_child(title)
	
	var y_pos = 360
	for i in range(player_data["inventory"].size()):
		var item = player_data["inventory"][i]
		var item_data = items_db.get_item(item)
		var sell_price = item_data["price"] / 2 if item_data else 5
		
		var item_btn = Button.new()
		item_btn.custom_minimum_size = Vector2(460, 45)
		item_btn.position = Vector2(130, y_pos)
		item_btn.text = item + " ‚Äî –ø—Ä–æ–¥–∞—Ç—å –∑–∞ " + str(sell_price) + " —Ä—É–±."
		
		var style_normal = StyleBoxFlat.new()
		style_normal.bg_color = Color(0.2, 0.25, 0.2, 1.0)
		item_btn.add_theme_stylebox_override("normal", style_normal)
		
		var style_hover = StyleBoxFlat.new()
		style_hover.bg_color = Color(0.3, 0.35, 0.3, 1.0)
		item_btn.add_theme_stylebox_override("hover", style_hover)
		
		item_btn.add_theme_font_size_override("font_size", 16)
		item_btn.add_theme_color_override("font_color", Color.WHITE)
		
		var item_to_sell = item
		item_btn.pressed.connect(func(): 
			sell_item(item_to_sell, player_data, main_node)
			sell_menu.queue_free()
		)
		
		sell_menu.add_child(item_btn)
		y_pos += 55
	
	var close_btn = Button.new()
	close_btn.custom_minimum_size = Vector2(460, 50)
	close_btn.position = Vector2(130, 920)
	close_btn.text = "–û–¢–ú–ï–ù–ê"
	
	var style_close = StyleBoxFlat.new()
	style_close.bg_color = Color(0.5, 0.1, 0.1, 1.0)
	close_btn.add_theme_stylebox_override("normal", style_close)
	
	close_btn.add_theme_font_size_override("font_size", 20)
	close_btn.add_theme_color_override("font_color", Color.WHITE)
	
	close_btn.pressed.connect(func(): sell_menu.queue_free())
	
	sell_menu.add_child(close_btn)

# –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
func sell_item(item_name: String, player_data: Dictionary, main_node: Node):
	if item_name not in player_data["inventory"]:
		return
	
	var item_data = items_db.get_item(item_name)
	var sell_price = item_data["price"] / 2 if item_data else 5
	
	player_data["inventory"].erase(item_name)
	player_data["balance"] += sell_price
	
	main_node.show_message("üí∞ –ü—Ä–æ–¥–∞–Ω–æ: " + item_name + " –∑–∞ " + str(sell_price) + " —Ä—É–±.")
	main_node.update_ui()
