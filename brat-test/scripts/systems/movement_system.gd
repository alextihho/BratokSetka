# movement_system.gd (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–≤–∞–¥—Ä–∞—Ç–∞–º —Å –∑–∞—Ç—Ä–∞—Ç–æ–π –≤—Ä–µ–º–µ–Ω–∏
extends Node

signal movement_started(from_square: String, to_square: String, duration: int)
signal movement_completed(square_id: String)
signal movement_cancelled()

var grid_system
var time_system

# –¢–∏–ø—ã –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
enum TransportType {
	WALK,      # –ü–µ—à–∫–æ–º - 30 –º–∏–Ω –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç
	CAR_LEVEL1, # –ú–∞—à–∏–Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1 - 10 –º–∏–Ω –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç
	CAR_LEVEL2  # –ú–∞—à–∏–Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2 - 5 –º–∏–Ω –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç
}

# –í—Ä–µ–º—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç (–≤ –º–∏–Ω—É—Ç–∞—Ö)
var transport_time = {
	TransportType.WALK: 30,
	TransportType.CAR_LEVEL1: 10,
	TransportType.CAR_LEVEL2: 5
}

# –¢–µ–∫—É—â–µ–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ
var is_moving: bool = false
var current_transport: TransportType = TransportType.WALK
var movement_timer: Timer = null

func _ready():
	grid_system = null  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ initialize
	time_system = get_node_or_null("/root/TimeSystem")

func initialize(p_grid_system):
	grid_system = p_grid_system
	print("üö∂ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ù–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–≤–∞–¥—Ä–∞—Ç—É
func move_to_square(from_square: String, to_square: String, transport: TransportType = TransportType.WALK) -> bool:
	if is_moving:
		print("‚ö†Ô∏è –£–∂–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏!")
		return false
	
	if not grid_system:
		print("‚ùå Grid system –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
		return false
	
	if from_square == to_square:
		print("‚ö†Ô∏è –£–∂–µ –Ω–∞ —ç—Ç–æ–º –∫–≤–∞–¥—Ä–∞—Ç–µ")
		return false
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
	if not grid_system.grid_squares.has(from_square) or not grid_system.grid_squares.has(to_square):
		print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤")
		return false
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
	var distance = grid_system.get_distance(from_square, to_square)
	if distance < 0:
		return false
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
	var time_per_square = transport_time[transport]
	var total_time = distance * time_per_square
	
	# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–∞–π–æ–Ω–∞–º–∏
	var from_district = grid_system.get_square_district(from_square)
	var to_district = grid_system.get_square_district(to_square)
	
	if from_district != to_district:
		total_time = int(total_time * 1.3)  # +30% –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–π–æ–Ω–∞
	
	print("üö∂ –î–≤–∏–∂–µ–Ω–∏–µ: %s ‚Üí %s (%d –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, %d –º–∏–Ω)" % [from_square, to_square, distance, total_time])
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
	start_movement_timer(from_square, to_square, total_time)
	
	is_moving = true
	current_transport = transport
	
	movement_started.emit(from_square, to_square, total_time)
	
	return true

# –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
func start_movement_timer(from_square: String, to_square: String, duration: int):
	if movement_timer:
		movement_timer.queue_free()
	
	movement_timer = Timer.new()
	movement_timer.wait_time = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	movement_timer.one_shot = true
	add_child(movement_timer)
	
	movement_timer.timeout.connect(func():
		complete_movement(to_square, duration)
		movement_timer.queue_free()
	)
	
	movement_timer.start()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
func complete_movement(to_square: String, time_spent: int):
	# –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
	if time_system:
		time_system.add_minutes(time_spent)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
	if grid_system:
		grid_system.set_player_square(to_square)
	
	is_moving = false
	movement_completed.emit(to_square)
	
	print("‚úÖ –ü—Ä–∏–±—ã–ª–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç: " + to_square)

# –û—Ç–º–µ–Ω–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
func cancel_movement():
	if movement_timer:
		movement_timer.stop()
		movement_timer.queue_free()
		movement_timer = null
	
	is_moving = false
	movement_cancelled.emit()

# –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (–±–µ–∑ –∑–∞—Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏)
func teleport_to_square(square_id: String):
	if grid_system:
		grid_system.set_player_square(square_id)
		print("‚ö° –¢–µ–ª–µ–ø–æ—Ä—Ç –≤ –∫–≤–∞–¥—Ä–∞—Ç: " + square_id)

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func get_current_transport() -> TransportType:
	return current_transport

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
func set_transport(transport: TransportType):
	current_transport = transport
	print("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑–º–µ–Ω—ë–Ω: " + str(transport))

# –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ
func calculate_travel_time(from_square: String, to_square: String, transport: TransportType = TransportType.WALK) -> int:
	if not grid_system:
		return 0
	
	var distance = grid_system.get_distance(from_square, to_square)
	if distance < 0:
		return 0
	
	var time_per_square = transport_time[transport]
	var total_time = distance * time_per_square
	
	# –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–π–æ–Ω
	var from_district = grid_system.get_square_district(from_square)
	var to_district = grid_system.get_square_district(to_square)
	
	if from_district != to_district:
		total_time = int(total_time * 1.3)
	
	return total_time

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å
func is_currently_moving() -> bool:
	return is_moving

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è UI
func get_transport_name(transport: TransportType) -> String:
	match transport:
		TransportType.WALK:
			return "–ü–µ—à–∫–æ–º"
		TransportType.CAR_LEVEL1:
			return "–ú–∞—à–∏–Ω–∞"
		TransportType.CAR_LEVEL2:
			return "–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞"
		_:
			return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç
func get_time_per_square(transport: TransportType) -> int:
	return transport_time[transport]
