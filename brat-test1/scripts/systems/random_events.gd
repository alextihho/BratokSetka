extends Node

signal event_triggered(event_type: String, event_data: Dictionary)

var player_stats
var items_db

func _ready():
	player_stats = get_node_or_null("/root/PlayerStats")
	items_db = get_node_or_null("/root/ItemsDB")
	print("üé≤ –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

func trigger_random_event(location: String, player_data: Dictionary, main_node: Node) -> bool:
	var event_chance = randf()
	var chance_threshold = get_location_danger(location)
	
	if event_chance > chance_threshold:
		return false
	
	var event_type = choose_event_type(location)
	
	match event_type:
		"combat":
			start_combat_event(location, player_data, main_node)
			return true
		"find_item":
			find_item_event(player_data, main_node)
			return true
		"find_money":
			find_money_event(player_data, main_node)
			return true
		"meet_npc":
			meet_npc_event(location, player_data, main_node)
			return true
	
	return false

func get_location_danger(location: String) -> float:
	match location:
		"–û–ë–©–ï–ñ–ò–¢–ò–ï":
			return 0.95
		"–õ–ê–†–Å–ö":
			return 0.90
		"–ì–ê–†–ê–ñ":
			return 0.85
		"–†–´–ù–û–ö":
			return 0.80
		"–í–û–ö–ó–ê–õ":
			return 0.75
		"–£–õ–ò–¶–ê":
			return 0.70
		"–ü–û–†–¢":
			return 0.60
		_:
			return 0.85

func choose_event_type(location: String) -> String:
	var roll = randf()
	
	match location:
		"–£–õ–ò–¶–ê":
			if roll < 0.4:
				return "combat"
			elif roll < 0.6:
				return "meet_npc"
			elif roll < 0.8:
				return "find_money"
			else:
				return "find_item"
		
		"–ü–û–†–¢":
			if roll < 0.5:
				return "combat"
			elif roll < 0.7:
				return "find_item"
			else:
				return "meet_npc"
		
		"–í–û–ö–ó–ê–õ":
			if roll < 0.3:
				return "combat"
			elif roll < 0.6:
				return "meet_npc"
			else:
				return "find_money"
		
		_:
			if roll < 0.4:
				return "find_money"
			elif roll < 0.7:
				return "meet_npc"
			else:
				return "find_item"

func start_combat_event(location: String, player_data: Dictionary, main_node: Node):
	var enemy_type = choose_enemy_type(location)
	
	var enemy_names = {
		"gopnik": "–ì–æ–ø–Ω–∏–∫",
		"drunkard": "–ü—å—è–Ω—ã–π",
		"thug": "–•—É–ª–∏–≥–∞–Ω",
		"bandit": "–ë–∞–Ω–¥–∏—Ç",
		"guard": "–û—Ö—Ä–∞–Ω–Ω–∏–∫",
		"boss": "–ì–ª–∞–≤–∞—Ä—å"
	}
	
	main_node.show_message("‚ö†Ô∏è " + enemy_names.get(enemy_type, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫") + " —Ö–æ—á–µ—Ç –ø–æ–¥—Ä–∞—Ç—å—Å—è!")
	
	await main_node.get_tree().create_timer(1.5).timeout
	
	var battle_script = load("res://scripts/systems/battle.gd")
	if battle_script:
		var battle = battle_script.new()
		main_node.add_child(battle)
		battle.setup(player_data, enemy_type)
		
		battle.battle_ended.connect(func(victory):
			if victory:
				main_node.show_message("‚úÖ –ü–æ–±–µ–¥–∞!")
				main_node.update_ui()
			else:
				main_node.show_message("üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ...")
				main_node.update_ui()
		)

func choose_enemy_type(location: String) -> String:
	var roll = randf()
	
	match location:
		"–£–õ–ò–¶–ê":
			if roll < 0.5:
				return "gopnik"
			elif roll < 0.8:
				return "thug"
			else:
				return "drunkard"
		
		"–ü–û–†–¢":
			if roll < 0.4:
				return "bandit"
			elif roll < 0.7:
				return "thug"
			else:
				return "guard"
		
		"–í–û–ö–ó–ê–õ":
			if roll < 0.6:
				return "gopnik"
			else:
				return "thug"
		
		_:
			if roll < 0.7:
				return "gopnik"
			else:
				return "thug"

func find_item_event(player_data: Dictionary, main_node: Node):
	var possible_items = [
		"–ë—É–ª–∫–∞", "–°–∏–≥–∞—Ä–µ—Ç—ã", "–ü–∏–≤–æ", "–ü—Ä–æ–¥—É–∫—Ç—ã"
	]
	
	var luck = player_stats.get_stat("LCK") if player_stats else 1
	var rare_chance = 0.1 + luck * 0.02
	
	var found_item = ""
	
	if randf() < rare_chance:
		var rare_items = ["–ö–æ–∂–∞–Ω–∫–∞", "–ë–∏—Ç–∞", "–û—Ç–º—ã—á–∫–∞", "–ê–ø—Ç–µ—á–∫–∞"]
		found_item = rare_items[randi() % rare_items.size()]
		main_node.show_message("‚ú® –†–µ–¥–∫–∞—è –Ω–∞—Ö–æ–¥–∫–∞: " + found_item + "!")
	else:
		found_item = possible_items[randi() % possible_items.size()]
		main_node.show_message("üîç –ù–∞—à–ª–∏: " + found_item)
	
	player_data["inventory"].append(found_item)
	
	if player_stats:
		player_stats.add_stat_xp("LCK", 5)

func find_money_event(player_data: Dictionary, main_node: Node):
	var luck = player_stats.get_stat("LCK") if player_stats else 1
	var base_amount = randi_range(10, 50)
	var amount = base_amount + luck * 5
	
	player_data["balance"] += amount
	main_node.show_message("üí∞ –ù–∞—à–ª–∏ " + str(amount) + " —Ä—É–±.!")
	main_node.update_ui()
	
	if player_stats:
		player_stats.add_stat_xp("LCK", 3)

func meet_npc_event(location: String, player_data: Dictionary, main_node: Node):
	var dialogues = get_location_dialogues(location)
	var dialogue = dialogues[randi() % dialogues.size()]
	
	main_node.show_message(dialogue)

func get_location_dialogues(location: String) -> Array:
	match location:
		"–£–õ–ò–¶–ê":
			return [
				"–ü—Ä–æ—Ö–æ–∂–∏–π: '–≠–π, –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä—ã —Ä—É–±–ª–µ–π?'",
				"–°—Ç–∞—Ä–∏–∫: '–ú–æ–ª–æ–¥—ë–∂—å –ø–æ—à–ª–∞ –Ω–µ —Ç–∞...'",
				"–ö–µ–Ω—Ç: '–°–ª—ã—à–∞–ª, –Ω–∞ –ø–æ—Ä—Ç—É –¥–≤–∏–∂—É—Ö–∞...'",
				"–î–µ–≤—É—à–∫–∞: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–¥–µ –≤–æ–∫–∑–∞–ª?'"
			]
		
		"–í–û–ö–ó–ê–õ":
			return [
				"–ö–æ–Ω—Ç–∞–∫—Ç: '–ò—â–µ—à—å —Ä–∞–±–æ—Ç—É? –ï—Å—Ç—å –¥–µ–ª—å—Ü–µ...'",
				"–ú–µ–Ω—Ç: '–î–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å?'",
				"–ë–∞—Ä—ã–≥–∞: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä!'"
			]
		
		"–†–´–ù–û–ö":
			return [
				"–¢–æ—Ä–≥–æ–≤–µ—Ü: '–ì–ª—è–¥–∏, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä!'",
				"–ë–∞–±–∫–∞: '–ö—É–ø–∏ –æ–≥—É—Ä—á–∏–∫–æ–≤!'",
				"–ë—Ä–∞—Ç–∞–Ω: '–ü–æ–º–æ–≥–∏ —Å –≥—Ä—É–∑–æ–º...'"
			]
		
		"–ü–û–†–¢":
			return [
				"–ì—Ä—É–∑—á–∏–∫: '–ü–æ—Ä—Ç - –Ω–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫'",
				"–®—ë–ø–æ—Ç: '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –æ—Ä—É–∂–∏–µ–º?'",
				"–û—Ö—Ä–∞–Ω–Ω–∏–∫: '–ß–µ–≥–æ —Ç—É—Ç —à–ª—è–µ—à—å—Å—è?'"
			]
		
		_:
			return [
				"–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –∫–∏–≤–∞–µ—Ç",
				"–ö—Ç–æ-—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ"
			]
